{
    "name": "reveal-on-scroll",
    "type": "registry:ui",
    "dependencies": ["gsap", "@gsap/react"],
    "files": [
        {
            "path": "gsap/reveal-on-scroll.tsx",
            "type": "registry:ui",
            "target": "~/components/gsap/reveal-on-scroll.tsx",
            "content": "\"use client\";\n\nimport { ComponentProps, useRef } from \"react\";\n\nimport { useGSAP } from \"@gsap/react\";\nimport gsap from \"gsap\";\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\";\n\ngsap.registerPlugin(ScrollTrigger);\n\ntype EffectType = \"fadeIn\" | \"slideInRight\" | \"zoomIn\" | \"blurIn\";\n\ntype RevealOnScrollProps = {\n    effect?: EffectType;\n} & ComponentProps<\"div\">;\n\nexport const RevealOnScroll = ({ effect = \"fadeIn\", ...props }: RevealOnScrollProps) => {\n    const wrapperRef = useRef<HTMLDivElement | null>(null);\n    const animationRef = useRef<gsap.core.Tween | null>(null);\n\n    useGSAP(\n        () => {\n            const element = wrapperRef.current;\n            if (!element) return;\n\n            // Clean Up\n            animationRef.current?.scrollTrigger?.kill();\n            animationRef.current?.kill();\n            gsap.set(element, { clearProps: \"all\" });\n\n            switch (effect) {\n                case \"fadeIn\":\n                    animationRef.current = gsap.fromTo(\n                        element,\n                        { opacity: 0, y: 50 },\n                        {\n                            opacity: 1,\n                            y: 0,\n                            duration: 1,\n                            scrollTrigger: {\n                                trigger: element,\n                                start: \"top 80%\",\n                                toggleActions: \"play pause play reverse\",\n                            },\n                        },\n                    );\n                    break;\n                case \"slideInRight\":\n                    animationRef.current = gsap.fromTo(\n                        element,\n                        { x: 100, opacity: 0 },\n                        {\n                            x: 0,\n                            opacity: 1,\n                            duration: 1,\n                            scrollTrigger: {\n                                trigger: element,\n                                start: \"top 80%\",\n                                toggleActions: \"play reverse play reverse\",\n                            },\n                        },\n                    );\n                    break;\n                case \"zoomIn\":\n                    animationRef.current = gsap.fromTo(\n                        element,\n                        { scale: 0.8, opacity: 0 },\n                        {\n                            scale: 1,\n                            opacity: 1,\n                            duration: 1,\n                            scrollTrigger: {\n                                trigger: element,\n                                start: \"top 80%\",\n                                toggleActions: \"play reverse play reverse\",\n                            },\n                        },\n                    );\n                    break;\n\n                case \"blurIn\":\n                    animationRef.current = gsap.fromTo(\n                        element,\n                        { y: 30, opacity: 0, filter: \"blur(10px)\" },\n                        {\n                            y: 0,\n                            opacity: 1,\n                            filter: \"blur(0px)\",\n                            duration: 1,\n                            scrollTrigger: {\n                                trigger: element,\n                                start: \"top 80%\",\n                                toggleActions: \"play reverse play reverse\",\n                            },\n                        },\n                    );\n                    break;\n            }\n            return () => {\n                animationRef.current?.scrollTrigger?.kill();\n                animationRef.current?.kill();\n            };\n        },\n        { scope: wrapperRef, dependencies: [effect] },\n    );\n\n    return <div {...props} ref={wrapperRef} />;\n};\n"
        }
    ]
}
