{
  "name": "base-button",
  "type": "registry:ui",
  "dependencies": ["@hugeicons/react", "react-aria-components", "lucide-react"],
  "registryDependencies": [],
  "files": [
    {
      "path": "twc-ui/base-button.tsx",
      "type": "registry:ui",
      "target": "components/ui/twc-ui/base-button.tsx",
      "content": "'use client'\n\nimport { cva, type VariantProps } from 'class-variance-authority'\nimport {\n  Button as AriaButton,\n  composeRenderProps,\n  type ButtonProps as AriaButtonProps\n} from 'react-aria-components'\nimport { cn } from '@/lib/utils'\nimport { HugeiconsIcon, type IconSvgElement } from '@hugeicons/react'\nimport { LoaderCircleIcon } from 'lucide-react'\n\nconst buttonVariants = cva(\n  [\n    'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors active:border-ring',\n    /* Disabled */\n    'data-[disabled]:pointer-events-none data-[disabled]:opacity-50 ',\n    /* Focus Visible */\n    'focus-visible:border-ring focus-visible:ring-ring/20 focus-visible:ring-[3px]',\n    'active:ring-[3px]',\n    /* Resets */\n    'focus-visible:outline-none'\n  ],\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground data-[hovered]:bg-primary/90 active:ring-ring/20 ',\n        destructive:\n          'bg-destructive text-destructive-foreground text-white data-[hovered]:bg-destructive/90 active:ring-destructive/50',\n        outline:\n          'border border-input bg-background  data-[hovered]:bg-accent data-[hovered]:text-accent-foreground focus-visible:ring-ring/20 active:ring-ring/50',\n        secondary: 'bg-secondary text-secondary-foreground  data-[hovered]:bg-secondary/80',\n        ghost:\n          'data-[hovered]:bg-accent data-[hovered]:text-accent-foreground active:ring-ring/20 focus-visible:border focus-visible:border-primary focus-visible:ring-ring/20 active:ring-ring/50 text-sm',\n        link: 'text-primary underline-offset-4 data-[hovered]:underline',\n        toolbar:\n          'data-[hovered]:bg-accent data-[hovered]:text-accent-foreground active:ring-ring/20 focus-visible:border focus-visible:border-primary focus-visible:ring-ring/20 active:ring-ring/50 text-sm',\n        'toolbar-default':\n          'border border-input bg-background  data-[hovered]:bg-accent data-[hovered]:text-accent-foreground focus-visible:ring-ring/20 active:ring-ring/50 text-sm'\n      },\n      size: {\n        default: 'h-9 px-4 py-2',\n        sm: 'h-8 rounded-md px-3 text-xs',\n        lg: 'h-10 rounded-md px-8',\n        icon: 'size-9',\n        auto: 'h-9 w-auto py-2 px-2',\n        'icon-xs': 'size-6',\n        'icon-sm': 'size-7'\n      }\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default'\n    }\n  }\n)\n\nexport interface BaseButtonProps extends AriaButtonProps, VariantProps<typeof buttonVariants> {\n  loading?: boolean\n  disabled?: boolean\n  icon?: IconSvgElement\n  iconClassName?: string\n  title?: string\n}\n\nexport const BaseButton = ({\n  className,\n  disabled = false,\n  variant,\n  size,\n  form,\n  type = 'button',\n  loading,\n  icon,\n  iconClassName,\n  children,\n  title = '',\n  ...props\n}: BaseButtonProps) => {\n  if (variant === 'toolbar') {\n    size = 'icon'\n    title = ''\n  }\n\n  if (variant === 'toolbar-default') {\n    size = 'auto'\n  }\n\n  const iconSizeClass = {\n    auto: 'size-5',\n    default: 'size-5',\n    sm: 'size-5',\n    lg: 'size-5',\n    icon: 'size-5',\n    'icon-sm': 'size-4',\n    'icon-xs': 'size-3'\n  }[size || 'default']\n\n  const isToolbar = variant === 'toolbar' || variant === 'toolbar-default'\n\n  return (\n    <AriaButton\n      form={form}\n      type={type}\n      isDisabled={disabled || loading}\n      isPending={loading}\n      className={composeRenderProps(className, className =>\n        cn(\n          'gap-2',\n          buttonVariants({\n            variant,\n            size\n          }),\n          className\n        )\n      )}\n      {...props}\n    >\n      {composeRenderProps(children, children => (\n        <div className={cn('flex gap-2', size === 'icon' ? 'mx-auto' : '')}>\n          {!loading && icon && (\n            <HugeiconsIcon\n              icon={icon}\n              className={cn(\n                isToolbar ? 'text-primary' : '',\n                disabled ? 'text-muted-foreground' : '',\n                iconSizeClass,\n                iconClassName\n              )}\n            />\n          )}\n          {loading && (\n            <LoaderCircleIcon className={cn('animate-spin', iconSizeClass)} aria-hidden=\"true\" />\n          )}\n          {(title || children) && variant !== 'toolbar' && (\n            <div className={cn(isToolbar ? 'hidden lg:flex' : '')}>{title || children}</div>\n          )}\n        </div>\n      ))}\n    </AriaButton>\n  )\n}\n\nexport { buttonVariants }\n"
    }
  ]
}
